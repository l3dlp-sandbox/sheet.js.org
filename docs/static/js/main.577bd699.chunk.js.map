{"version":3,"sources":["components/App.tsx","index.tsx"],"names":["parseAB","ab","globalThis","XLSX","read","WTF","dense","cellDates","e","Error","TIMEOUT","MySwal","withReactContent","Swal","getRowsCols","data","sheetName","rows","utils","sheet_to_json","header","raw","columns","row","keys","Object","length","map","key","name","encode_col","editor","TextEditor","exportTypes","App","useState","setRows","setColumns","workBook","setWorkBook","sheets","setSheets","current","setCurrent","loading","setLoading","fileInput","useRef","useWorker","remoteDependencies","parseWorker","controller","onDrop","useCallback","acceptedFiles","handleF","useDropzone","getRootProps","getInputProps","isDragActive","selectSheet","reset","json_to_sheet","col","skipHeader","new_rows","new_columns","ev","f","target","files","value","size","fire","icon","title","text","confirmButtonText","showCancelButton","cancelButtonText","isConfirmed","end","setTimeout","kill","footer","href","arrayBuffer","file","console","log","message","encodeURIComponent","Sheets","SheetNames","clearTimeout","ext","wb","book_new","forEach","n","book_append_sheet","writeFile","idx","parseInt","type","onChangeCapture","ref","disabled","className","id","onChange","sheet","onRowsChange","onClick","saveFile","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.577bd699.chunk.js","sourcesContent":["/* sheet.js.org (C) 2022-present SheetJS LLC -- https://sheetjs.com */\nimport React, { useState, ChangeEvent, useRef, useCallback } from \"react\";\nimport DataGrid, { TextEditor } from \"react-data-grid\";\nimport * as _XLSX from \"xlsx\";\nimport { WorkBook, WorkSheet, utils, writeFile } from \"xlsx\";\nimport { BeatLoader } from \"react-spinners\";\nimport { useWorker } from \"@koale/useworker\";\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport { useDropzone } from \"react-dropzone\";\n\nimport \"../styles/App.css\";\n\nconst XLSX = _XLSX;\nconst parseAB = (ab: ArrayBuffer): WorkBook | Error => {\n  try {\n    return ((globalThis as any).XLSX as typeof XLSX).read(ab, { WTF: true, dense: true, cellDates: true });\n  } catch(e) { return e instanceof Error ? e : new Error(e as any); }\n}\n\nconst TIMEOUT = 10_000; // 10 seconds\n\nconst MySwal = withReactContent(Swal)\n\ntype Row = any[]; /*{\n  [index: string]: string | number;\n};*/\n\ntype Column = {\n  key: string;\n  name: string;\n  editor: typeof TextEditor;\n};\n\ntype DataSet = {\n  [index: string]: WorkSheet;\n};\n\nfunction getRowsCols(\n  data: DataSet,\n  sheetName: string\n): {\n  rows: Row[];\n  columns: Column[];\n} {\n  const rows: Row[] = utils.sheet_to_json(data[sheetName], {header:1, raw: false});\n  let columns: Column[] = [];\n\n  for (let row of rows) {\n    const keys: string[] = Object.keys(row);\n\n    if (keys.length > columns.length) {\n      columns = keys.map((key) => {\n        return { key, name: utils.encode_col(+key), editor: TextEditor };\n      });\n    }\n  }\n\n  return { rows, columns };\n}\n\nconst exportTypes = [\"xlsx\", \"xlsb\", \"csv\", \"html\"];\n\nexport default function App() {\n  const [rows, setRows] = useState<Row[]>([]);\n  const [columns, setColumns] = useState<Column[]>([]);\n  const [workBook, setWorkBook] = useState<DataSet>({} as DataSet);\n  const [sheets, setSheets] = useState<string[]>([]);\n  const [current, setCurrent] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const [parseWorker, controller] = useWorker(parseAB, {\n    remoteDependencies: [\n      \"https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js\",\n    ],\n  });\n\n  const onDrop = useCallback(async acceptedFiles => {\n    if(loading) return;\n    await setLoading(true);\n    handleF(acceptedFiles[0]);\n  }, [handleF, loading]);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({onDrop});\n\n  async function selectSheet(name: string, reset = true) {\n    await setLoading(true);\n    if(reset) workBook[current] = utils.json_to_sheet(rows, {\n      header: columns.map((col: Column) => col.key),\n      skipHeader: true\n    });\n\n    const { rows: new_rows, columns: new_columns } = getRowsCols(workBook, name);\n\n    await setRows(new_rows);\n    await setColumns(new_columns);\n    await setCurrent(name);\n    await setLoading(false);\n  }\n\n  async function handleFile(ev: ChangeEvent<HTMLInputElement>): Promise<void> {\n    await setLoading(true);\n    const f = ev.target.files?.[0];\n    if(!f) {\n      if(fileInput?.current) fileInput.current.value = \"\";\n      return await setLoading(false);\n    }\n    await handleF(f);\n  }\n  async function handleF(f: File): Promise<void> {\n    if(f.size > 1_048_576) {\n      const res = await MySwal.fire({\n        icon: \"warning\",\n        title: \"Large File\",\n        text: `File is ${(f.size/1_048_576)>>>0} MB and reading may be slow.  Should we proceed?`,\n        confirmButtonText: 'Continue',\n        showCancelButton: true,\n        cancelButtonText: 'Stop'\n      });\n      if(!res.isConfirmed) {\n        if(fileInput?.current) fileInput.current.value = \"\";\n        return await setLoading(false);\n      }\n    }\n    let end = setTimeout(async() => {\n      await controller.kill();\n      await MySwal.fire({\n        icon: \"error\",\n        title: \"Timeout\",\n        text: `Stopped reading after ${TIMEOUT/1000} seconds`,\n        footer: <a href={`mailto:oss@sheetjs.com?subject=Public Demo Error&body=Timeout on file of size ${f.size} bytes`}>We would appreciate the feedback</a>\n      });\n      if(fileInput?.current) fileInput.current.value = \"\";\n      return await setLoading(false);\n    }, TIMEOUT);\n    const file = await f.arrayBuffer();\n    let data: ReturnType<typeof parseAB> = new Error(\"\");\n    data = await parseWorker(file);\n\n    if(data instanceof Error) {\n      console.log(data);\n      await MySwal.fire({\n        icon: \"error\",\n        title: \"This file does not appear to be a valid spreadsheet\",\n        text: `Library Error: ${data.message || data}`,\n        footer: <a href={`mailto:oss@sheetjs.com?subject=Public Demo Error&body=${encodeURIComponent(data.message)}`}>We would appreciate the feedback</a>\n      });\n      if(fileInput?.current) fileInput.current.value = \"\";\n      return await setLoading(false);\n    }\n\n    await setWorkBook(data.Sheets);\n    await setSheets(data.SheetNames);\n\n    /* repeated from selectSheet since workBook will be stale */\n    const name = data.SheetNames[0];\n    const { rows: new_rows, columns: new_columns } = getRowsCols(data.Sheets, name);\n\n    await setRows(new_rows);\n    await setColumns(new_columns);\n    await setCurrent(name);\n\n    clearTimeout(end);\n\n    if(fileInput?.current) fileInput.current.value = \"\";\n    await setLoading(false);\n  }\n\n  async function saveFile(ext: string) {\n    await setLoading(true);\n    const wb = utils.book_new();\n\n    sheets.forEach((n) => {\n      utils.book_append_sheet(wb, workBook[n], n);\n    });\n\n    writeFile(wb, \"sheet.\" + ext);\n    await setLoading(false);\n  }\n\n  async function onSelect(e: ChangeEvent) {\n    const idx = parseInt(((e as ChangeEvent).target as HTMLSelectElement).value, 10);\n    await selectSheet(sheets[idx]);\n  }\n\n  return (\n    <>\n      <input type=\"file\" onChangeCapture={handleFile} ref={fileInput} disabled={loading} />\n      <BeatLoader loading={loading} size={10}/>\n      {!loading && (<div className='dropzone' {...getRootProps()}>\n        <input className='dropinput' {...getInputProps}/>\n        {loading ? (<p>Loading file ...</p>) : isDragActive ? (<p>Drop files here!</p>) : (<p>... or drag and drop files here.</p>)}\n      </div>)}\n      {sheets.length > 0 && (\n        <>\n          <p>Use the dropdown to switch to a worksheet:&nbsp;\n            <select id=\"wselect\" onChange={onSelect}>\n              {sheets.map((sheet, idx) => (<option key={sheet} value={idx}>{sheet}</option>))}\n            </select>\n          </p>\n          <div className=\"flex-cont\">\n            <b>Current Sheet: {current}</b>\n          </div>\n          <DataGrid columns={columns} rows={rows} onRowsChange={setRows} />\n          <p>Click one of the buttons to create a new file with the modified data</p>\n          <div className=\"flex-cont\">\n            {exportTypes.map((ext) => (\n              <button key={ext} onClick={() => saveFile(ext)}>\n                export [.{ext}]\n              </button>\n            ))}\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport './styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}